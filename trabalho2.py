# -*- coding: utf-8 -*-
"""Trabalho2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13cijB5dcM749GeEpJTJFWvoM2FOfOfXi

# Disciplina: Ciência de Dados (DCA-0131)
## Prof. Luiz Affonso Guedes

Departamento de Engenharia de Computação e Automação - DCA
UFRN - 2021

# COMPONENTES
Paula de Souza Braz,
Italo maciel e
Lays de Freitas

# Trabalho correspondente à segunda avaliação.

Desenvolver e postar (deploy) uma aplicação Web utilizando gráficos interativos do pacote Plotly. A base de dados é de livre escolha da equipe.

Produzir um vídeo de até 10 minutos mostrando aspectos de implementação e funcionamento da aplicação.

Sugestões:

- Para desenvolver a aplicação Web pode-se utilizar os pacotes Dash ou Stremlit.

- Para postar a aplicação na Web, pode-se utilizar o servidor gratúito NGrok

- Utilize os notebooks das Aulas 9 e 10 como referência.


## Período:
Inicia em 21/01/2022 às 00h00 e finaliza em 03/02/2022 às 13h59

#IMPORTAÇÃO DAS BIBLIOTECAS
"""

# Importação do Pacote
import statistics as st 
from scipy import stats
from pandas import Series,DataFrame
import plotly.express as px
import plotly.graph_objs as go 
import plotly.figure_factory as ff
import numpy as np

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
# %matplotlib inline
# %pylab inline
import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('ggplot')
# Biblioteca para trabalhar com mapas:
!pip install folium
!pip install seaborn
!pip install plotly
!pip install dash
# Carregando a base de dados:

dataset1 = pd.read_csv('glp-2020-01.csv',sep=';',encoding='utf-8')
# Visualizando as 5 primeiras linhas do Dataframe:
dataset1.head()
dataset1.shape

"""<h1><b>Tratamento dos Dados<b></h1>
<p> Atribuir valor padrão para colunas e linhas sem informações/valores. </p>

<p> Ocorrência de valores 'NAN' no dataset <p>
"""

dataset1.isnull().sum()

mediana = st.median(dataset1['Valor de Compra'])
mediana

dataset1['Valor de Compra'].fillna(mediana, inplace = True)
dataset1

"""Analisar: Dados categóricos substitui pela moda, porém complemento, Numero Rua e Bairro são atributos únicos de uma região."""

dataset1.isnull().sum()

value_product = dataset1[['Bandeira','Produto','Valor de Venda',]]

value_product

Bahiana = dataset1.loc[dataset1['Bandeira'] == 'BAHIANA'].describe()
Bahiana

Amazongas = dataset1.loc[dataset1['Bandeira'] == 'AMAZONGÁS'].describe()
Amazongas

Branca = dataset1.loc[dataset1['Bandeira'] == 'BRANCA'].describe()
Branca

Consigaz = dataset1.loc[dataset1['Bandeira'] == 'CONSIGAZ'].describe()
Consigaz

Copagaz = dataset1.loc[dataset1['Bandeira'] == 'COPAGAZ'].describe()
Copagaz

Fogas = dataset1.loc[dataset1['Bandeira'] == 'FOGAS'].describe()
Fogas

Liquigas = dataset1.loc[dataset1['Bandeira'] == 'LIQUIGÁS'].describe()
Liquigas

Maxi = dataset1.loc[dataset1['Bandeira'] == 'MAXI CHAMA'].describe()
Maxi

Minasgas = dataset1.loc[dataset1['Bandeira'] == 'MINASGAS'].describe()
Minasgas

Nacional = dataset1.loc[dataset1['Bandeira'] == 'NACIONAL GÁS BUTANO'].describe()
Nacional

Petrobras = dataset1.loc[dataset1['Bandeira'] == 'PETROBRAS DISTRIBUIDORA S.A.'].describe()
Petrobras

Servgas = dataset1.loc[dataset1['Bandeira'] == 'SERVGÁS'].describe()
Servgas

Supergasbras = dataset1.loc[dataset1['Bandeira'] == 'SUPERGASBRAS'].describe()
Supergasbras

Supergasbras_e = dataset1.loc[dataset1['Bandeira'] == 'SUPERGASBRAS ENERGIA'].describe()
Supergasbras_e

Ultragaz = dataset1.loc[dataset1['Bandeira'] == 'ULTRAGAZ'].describe()
Ultragaz

"""<h1> <b> Produto de Valor mínimo e Valor máximo </b> </h1>"""

print("O valor máximo foi:\n",value_product.max())
print("O valor mínimo foi:\n",value_product.min())

"""<h1><b> Total de Produtos da Pesquisa de Preços </b></h1>"""

product= dataset1.groupby('Bandeira')['Bandeira'].count()
product

"""<h1> <b> Gráfico I <br> Box - Tipos de Combustíveis </b> </h1>"""

product.plot.bar(color = 'brown', alpha = 0.75)
plt.show()

"""<h3> Média dos valores de todos os combustíveis em todas as regiões </h3>"""

media = dataset1['Valor de Venda'].mean()
media

"""<h2> Descrição dos valores dos tipos de combustível </h2>

*   Total de linhas
*   Média dos valores
*   Desvio Padrão
*   Valor Mínimo
*   Mediana
*   Valor Máximo







"""

dataset2 = dataset1['Valor de Venda'].describe()
dataset2

dataset3 = dataset1['Valor de Compra'].describe()
dataset3

"""<h1> <b> Gráfico II <br> BoxPlot dos valores dos combustíveis </b> </h1>
<p> Ao analisar o gráfico verificamos dois outliers (pontos fora do padrão), <br> para isso podemos substituir valores 9x o desvio padrão pela mediana </p>



"""

sns.boxplot(dataset1['Valor de Venda']).set_title('Valor de venda')

desv = st.stdev(dataset1['Valor de Venda'])
desv

"""

```
# Análise do bloco 
```

<p> Ao compararmos os valores de venda dos combustíveis 10x em relação ao desvio padrão, encontramos os valores correspondentes aos outliers. Logo, podemos fazer o tratamento desses dados pela sua mediana, em relação aos preços no âmbito nacional </p>"""

dataset1.loc[dataset1['Valor de Venda'] >= 10 * desv]

"""<h1> <b> Gráfico III <br> Distribuição de valores dos combustíveis </b> </h1>"""

sns.distplot(dataset1['Valor de Venda'], hist = True, 
            hist_kws =({'edgecolor':'black'}), color = 'green').set_title('Valor de venda')

"""<h1> <b> Gráfico IV <br> Histograma valores dos combustíveis </b> </h1>"""

h = np.histogram(dataset1.iloc[:,12], bins = 10)
h

plt.hist(dataset1.iloc[:,12], bins = 10, alpha = 0.60, color = 'steelblue')
plt.title('Valor de venda (R$)')
plt.ylabel("Frequência")
plt.xlabel("Preço")
plt.show()

"""<h1><b> Gráfico V <br>
Gráfico Interativo de pizza </b></h1>
"""

fig = px.pie(dataset1, values='Valor de Venda', names='Bandeira', title='Valor de Venda por produto')
fig.show()

fig = px.pie(dataset1, values='Valor de Venda', names='Regiao - Sigla', title='Valor de Venda por Região')
fig.show()

fig = px.pie(dataset1, values='Valor de Venda', names='Estado - Sigla', title='Valor de Venda por Estado')
fig.show()

"""<h1><b> Gráfico VI <br>
Gráfico Interativo de barra </b></h1>
"""

product = dataset1['Bandeira'].array
value = dataset1['Bandeira'].value_counts().array

trace = go.Bar(x = product, y = value)

data = [trace]
fig3 = go.Figure(data=data)
fig3.show()

Bandeira = dataset1[['Bandeira','Produto','Valor de Venda']]
Bandeira

Br = dataset1[['Bandeira','Produto','Valor de Venda','Valor de Compra']]
Br

fig = px.bar(Br, x="Bandeira", y="Valor de Venda", color="Bandeira", barmode = "group")
fig.show()

nordeste = dataset1.loc[dataset1['Regiao - Sigla'] == 'NE']
nordeste1 = nordeste.loc[nordeste['Estado - Sigla'] == 'RN']
nordeste1

"""<h1><b> Gráfico VII <br>
Gráfico Interativo de boxplox tipo violino </b></h1>
"""

fig = px.box(nordeste1, x="Estado - Sigla", y="Valor de Venda", color="Bandeira", notched=True)
fig.show()

"""<h1><b> Gráfico VIII <br>
Gráfico Interativo de dispersão </b></h1>
"""

fig1 = px.scatter(nordeste1, x="Valor de Compra", y="Valor de Venda", color="Bandeira")
fig1.show()

"""<h3> <b> Nesse gráfico abaixo, consideramos a nível nacional. Os pontos encontram-se sobrepostos devido ao tratamento de dados realizado acima para a variável valor de compra. <br> Substituimos as posições 'NAN' pela mediana no âmbito nacional, pois para cada bandeira não foi possível já que muitas bandeira não continha dados nenhum. </b> </h3>"""

fig = px.scatter_matrix(dataset1, dimensions=["Valor de Venda", "Valor de Compra"], color="Bandeira")
fig.show()

nordeste2 = nordeste1.loc[nordeste1['Bandeira'].isin(['BRANCA','LIQUIGÁS','MINASGAS']),'Bandeira']
nordeste2

fig2 = px.density_contour(nordeste1, x="Valor de Compra", y="Valor de Venda", color ="Bandeira", marginal_x="rug", marginal_y="histogram")
fig2.show()

fig = px.parallel_coordinates( 
    nordeste1, dimensions=['Produto', 'Valor de Venda', 'Valor de Compra' , 'Estado - Sigla']) 
  
fig.show()

Bandeira=dataset1[['Estado - Sigla','Bandeira','Valor de Venda']]
Bandeira

Bandeira1=Bandeira[dataset1['Bandeira'] == 'BRANCA']
Bandeira2=Bandeira[dataset1['Bandeira'] == 'LIQUIGÁS']
Bandeira3=Bandeira[dataset1['Bandeira']== 'SUPERGASBRAS ENERGIA']
Bandeira_analise= pd.merge(Bandeira1, Bandeira2, how = 'outer')
Bandeira_analise=pd.merge(Bandeira_analise, Bandeira3, how = 'outer')

fig = px.histogram(Bandeira_analise, x="Estado - Sigla", y="Valor de Venda", color="Bandeira", marginal="box",
                   hover_data=Bandeira_analise.columns)
fig.show()

fig6 = px.parallel_categories(dataset1, color="Valor de Venda", color_continuous_scale=px.colors.sequential.Inferno)
fig6.show()

x1 = Bandeira1['Valor de Venda']
x2 = Bandeira2['Valor de Venda']


group_labels = ['Bandeira Branca', 'Bandeira Liquigás']

colors = ['slategray', 'magenta']

# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot([x1, x2], group_labels, bin_size=[6, 3],
                         curve_type='normal', # override default 'kde'
                         colors=colors)
fig.update_layout(title_text='Distplot com Distribuição Normal')
fig.show()

fig = ff.create_distplot([x1,x2], group_labels, show_hist=False, colors=colors)

# Add title
fig.update_layout(title_text='Grafico da Curva')
fig.show()

x3 = Bandeira3['Valor de Venda']

group_labels = ['Bandeira Branca', 'Bandeira Liquigás', 'Bandeira Supergás']
colors = ['#333F44', '#37AA9C', '#94F3E4']

# Create distplot with curve_type set to 'normal'
fig = ff.create_distplot([x1, x2, x3], group_labels, show_hist=False, colors=colors)

# Add title
fig.update_layout(title_text='Grafico da Curva')
fig.show()

fig = ff.create_distplot([x1,x2,x3], group_labels, colors=colors,
                         bin_size=[9, 6, 3], show_curve=False)
fig.show()